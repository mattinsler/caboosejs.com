<% page = 'controllers' %>

<section class="heading">
  <h1>Controllers</h1>
  <p>
    Controllers in Caboose are inspired by <a href="http://guides.rubyonrails.org/action_controller_overview.html">rails</a> and will look very similar.
  </p>
  <hr />
</section>

<section>
  <p>
    Controllers are the glue that connect the views with the routing system.  They are primarily responsible for dealing with models,
    collecting and arranging data, backend routing, and view determination.  You should aim to have short controllers and embed most of your
    logic in other functional units like models or helpers and just coordinate and translate in the controller.
  </p>
</section>

<section>
  <h2>Creating a new Controller</h2>
  <p>
    Caboose applications start out with an <code>ApplicationController</code> which serves to be the root controller that all others in
    your application inherit from.  This is not necessary, but is a good pattern to follow.  The ApplicationController is a place to
    put all of the filters and helpers that will be common to all controllers within your application.
  </p>
  <p>
    The ApplicationController inherits from <code>Controller</code> which contains the necessary methods to respond to requests.  You can
    either extend Controller directly or extend another controller.
  </p>
  <p>
    To create a new controller, you can either use the command line
    
    <%- highlight_start('bash') %>
$ caboose generate controller Posts
    <%- highlight_end() %>
  </p>
  <p>
    or just create a new file in the app/controllers directory.
    
    <%- highlight_start('coffeescript', 'app/controllers/posts_controller.coffee') %>
import 'ApplicationController'

class PostsController extends ApplicationController
  index: ->
    @render()
    <%- highlight_end() %>
  </p>
  <p>
    <strong>Please note</strong> that <%- link_to('naming conventions', '/docs/important-details#naming-conventions-matter') %>
    are very important here.  If you are creating controllers by hand, be sure to put them in the app/controllers directory and name
    the file in all lowercase letters as [controller name]_controller.coffee.  This should correspond to the controller class, which
    should always have Controller at the end of it and be camel-case.  So PostsController would correspond to posts_controller.coffee,
    and UniqueUsersController would correspond to unique_users_controller.coffee.
  </p>
</section>

<section>
  <h2>Controller actions</h2>
  <p>
    Methods on a controller correspond to a route action.  When caboose finds an appropriate route for a request, it will instantiate the
    controller and call the action named in the route.  For instance, if you have a route to the posts controller's index action:
    
    <%- highlight_start('coffeescript', 'config/routes.coffee') %>
modules.exports = ->
  @route '/posts', 'posts#index'
    <%- highlight_end() %>
  </p>
  <p>
    and you make a request to http://your-server/posts, caboose will first create the PostsController and then execute the <code>index</code>
    method.  If the index method looks like above, then it will simply render the page without taking any further actions.
  </p>
</section>

<section>
  <h2>Responding</h2>
  <p>
    There are a few ways that you can respond to a request from within a controller.  The most common will be <code>@render</code>
    and <code>@redirect_to</code>.
  </p>
  
  <section>
    <h3>Available response methods</h3>
    <p>
      <dl>
        <dt>@render()</dt>
        <dt>@render(view)</dt>
        <dt>@render(options)</dt>
        <dt>@render(view, options)</dt>
        <dd>
          <p>
            The main response method.  All other methods are just sugar.
          </p>
        </dd>
        <dt>@redirect_to(path)</dt>
        <dt>@redirect_to(path, flash)</dt>
        <dd>
          <p>
            Responds with a 302 redirection to the path of your choosing.<br/>
            The optional flash object will be available on the next rendered page.<br/>
            <%- highlight_start('coffeescript') %>@redirect_to '/authorized_path', {success: 'Welcome to my website!'}<%- highlight_end() %>
          </p>
        </dd>
        <dt>@not_found()</dt>
        <dt>@not_found(error)</dt>
        <dd>
          <p>
            Responds with a 404, optionally taking an error object.
          </p>
        </dd>
        <dt>@error(error)</dt>
        <dd>
          <p>
            Passes the error to the next middleware in the stack.  The default stack will respond with a 500 and print out the error.
          </p>
        </dd>
        <dt>@unauthorized()</dt>
        <dt>@unauthorized(error)</dt>
        <dd>
          <p>
            Responds with a 401, optionally taking an error object.
          </p>
        </dd>
      </dl>
    </p>
  </section>
</section>

<section>
  <h2>Controller variables</h2>
  <p>
    
  </p>
  <section>
    <h3>Available variable</h3>
    <p>
      <dl>
        <dt>@request</dt>
        <dd>
          <p>
            The request object as it comes back from <%- link_to('express', 'http://expressjs.com/guide.html#req.header()') %>.
          </p>
        </dd>
        <dt>@response</dt>
        <dd>
          <p>
            The response object as it comes back from <%- link_to('express', 'http://expressjs.com/guide.html#res.header()') %>.
          </p>
        </dd>
        <dt>@headers</dt>
        <dd>
          <p>
            An object with the current request's headers.
          </p>
        </dd>
        <dt>@cookies</dt>
        <dd>
          <p>
            An object with the current request's cookies.
          </p>
        </dd>
        <dt>@session</dt>
        <dd>
          <p>
            An object containing the current session.
          </p>
        </dd>
        <dt>@body</dt>
        <dd>
          <p>
            The body of a request when the encoding is multipart.
          </p>
        </dd>
        <dt>@params</dt>
        <dd>
          <p>
            An object that contains the parameters of the current request.  This is populated by the <%- link_to('routing', '/docs/routing') %>
            system.
          </p>
        </dd>
        <dt>@query</dt>
        <dd>
          <p>
            An object with the URL query parameters broken out.  For example, http://www.caboosejs.com?foo=bar&page=1 will result in a
            @query object that looks like

            <%- highlight_start('coffeescript') %>
{
  foo: 'bar',
  page: '1'
}
            <%- highlight_end() %>
          </p>
        </dd>
        <dt>@flash</dt>
        <dd>
          <p>
            
          </p>
        </dd>
      </dl>
    </p>
  </section>
</section>

<section>
  <h2>Attributes</h2>
  <p>
    
  </p>
  <section>
    <h3>Available attributes</h3>
    <p>
      <dl>
        <dt>helper</dt>
        <dd>
          <p>
            Make an object's methods available to the view.  Check out the <%- link_to('helper', '/docs/helpers') %> docs.
          </p>
        </dd>
        <dt>before_action</dt>
        <dd>
          <p>
            Execute a method before an action is executed.
          
            <%- highlight_start('coffeescript') %>
import 'ApplicationController'

class UsersController extends ApplicationController
  before_action (next) ->
    console.log "Request to #{@request.url}"
    next()
  before_action 'something_in_application_controller'
  before_action 'filter_something', {only: ['index']}
  before_action ((next) ->
    console.log 'This is not the index action'
    next()
  ), {except: ['index']}
  
  filter_something: (next) ->
    return next(new Error()) unless @params.foobar?
    next()
  
  index: -> @render()
            <%- highlight_end() %>
          </p>
        </dd>
        <dt>after_action</dt>
        <dd>
          Execute a method after an action is executed.
          
          <strong>Docs and implementation coming soon!</strong>
        </dd>
      </dl>
    </p>
</section>

<section>
  <h2>How does this come together?</h2>
  <p>
    Here we will create a resources route for our blog posts and another route that will map the root route
    to the PostsController index route.
    
    <%- highlight_start('coffeescript', 'config/routes.coffee') %>
module.exports = ->
  @resources 'posts'
  @route '/', 'posts#index'
    <%- highlight_end() %>
  </p>
  <p>
    We have an ApplicationController with a filter method that can be shared by all controllers who extend ApplicationController.
    We're using the <%- link_to('caboose-model', '/plugins/caboose-model') %> plugin to query for the post specified by the <code>id</code>
    parameter, setting the successful response to an instance variable to be used by the actions later.
    
    <%- highlight_start('coffeescript', 'app/controllers/application_controller.coffee') %>
import 'Post'

class ApplicationController extends Controller
  posts_filter: (next) ->
    Post.where(_id: @params.id).first (err, post) =>
      return next(err) if err?
      return next(new Error("Could not find post with id #{@params.id}")) unless post?
      @post = post
      next()
    <%- highlight_end() %>
  </p>
  <p>
    Finally, we create a PostsController to handle the resources actions.  We're telling the controller to filter the show, edit, update
    and destroy methods with the <code>posts_filter</code> from the ApplicationController to find the current post.  We've also implemented
    the index and show actions here.  The show action will already have <code>@post</code> set from the posts_filter, so all it does is
    render the view (which will be located at app/views/posts/show.html.[view-engine]).
  </p>
  <p>
    The index action is a bit more complex, and implements a rudimentary form of paging.  It is pulling the <code>page</code> and
    <code>page_size</code> from the <code>@query</code> and then using that to skip and limit the post records.  Finally, we render
    the index view (which will be located at app/views/posts/index.html.[view-engine]).
    
    <%- highlight_start('coffeescript', 'app/controllers/posts_controller.coffee') %>
import 'Post'
import 'ApplicationController'

class PostsController extends ApplicationController
  before_action 'posts_filter', {only: ['show', 'edit', 'update', 'destroy']}

  index: ->
    page_size = @query.page_size || 10
    page = @query.page || 1
    Post.skip(page_size * (page - 1)).limit(page_size).array (err, posts) =>
      return @error(err) if err?
      @posts = posts
      @render()
  
  show: -> @render()
  
  # handle other actions...
    <%- highlight_end() %>
  </p>
</section>
