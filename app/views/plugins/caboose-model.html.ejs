<% page = 'caboose-model' %>

<section class="heading">
  <h1>Caboose Model</h1>
  <p>
    caboose-model is a <a href="http://www.mongodb.org/">MongoDB</a> model library for <a href="http://www.caboosejs.com">caboose</a>.
    It uses <a href="https://github.com/christkv/node-mongodb-native">node-mongodb-native</a> as the underlying driver.
  </p>
  <hr />
</section>

<section>
  <h2>Installation</h2>
  <p>
    To install caboose-model, use the <code>caboose plugin install</code> command.
    
    <script src="https://gist.github.com/1631810.js"> </script>
  </p>
</section>

<section id="configuration">
  <h2>Configuration</h2>
  <p>
    After installation, there will be a caboose-model.json file in your config directory.  This file holds the configuration for
    connecting to MongoDB.  The initial value should look something like this.
    
    <script src="https://gist.github.com/1643612.js"> </script>
  </p>
  <p>
    This should be fine for a while, but eventually you'll need to deploy your app to a server, like <a href="http://www.heroku.com/">Heroku</a>.
    When this happens, just move that caboose-model.json file into one of the config/environments directories.
  </p>
  <p>
    You can also specify just the <code>url</code>.
    
    <script src="https://gist.github.com/1643744.js"> </script>
  </p>
  <p>
    Alternatively (for situations such as Heroku), you can use the config/application.coffee or config/environments/[env].coffee files
    to set the model configuration like this.
    
    <script src="https://gist.github.com/1643754.js"> </script>
  </p>
</section>

<section>
  <h2>Definition</h2>
  <p>
    Models can simply be defined in coffeescript by extending the <code>Model</code> class.  Here is the basic model that
    <code>caboose generate model Post</code> will create.
    
    <script src="https://gist.github.com/1631894.js"> </script>
  </p>
  <p>
    Models have attributes and methods.
  </p>
  <p>
    Attributes generally describe the model class.  So above we have a model named <code>Post</code>
    which should located in the app/models/post.coffee file and will store instances of itself in the <code>post</code> collection.  There are a
    variety of <a href="#supported_attributes">attributes</a> you can add a model, which can change it's behavior.
  </p>
  <p>
    Methods are actually just an <code>instance</code> attribute with syntactic sugar.  All class methods you define in your model class will
    just become methods of the model class, like you'd expect.
  </p>
  <p>
    Here's a more complex model to illustrate some of what you can do.
    
    <script src="https://gist.github.com/1643435.js"> </script>
  </p>
  <p>
    In the above example, we first import in functionality of the <code>StringHelper</code> (the <code>import</code> method is described <a href="#">here</a>)
    which we will use in the summary method.
  </p>
  <p>
    Then we define the Post model and store it in the post collection just like the generated model.
  </p>
  <p>
    Next we add a class method named <code>latest_timestamp</code> to the model.  Class methods are defined with the <code>static</code> attribute and
    are a great way to add shortcut methods like this.  In this case, we could just call <code>Post.latest_timestamp(...)</code> rather than writing
    out all the query code in a controller.  It's important to realize that latest_timestamp will not be available from instances.  So
    <code>new Post().latest_timestamp(...)</code> would not work.
  </p>
  <p>
    Finally we add an instance method named <code>summary</code> which uses the StringHelper to provide a summary of the content of the post.  The
    summary method could have also been defined as
    
    <script src="https://gist.github.com/1643709.js"> </script>
  </p>

  <section id="supported_attributes">
    <h3>Supported attributes</h3>
    <p>
      <code><strong>store_in(collection name)</strong></code> the collection to persist this model to<br>
      <code><strong>instance(method_name, method)</strong></code> a method to be added to the model prototype<br>
      <code><strong>static(method_name, method)</strong></code> a method to be added to the model, not available to instances<br>
    </p>
  </section>
</section>

<section id="finders">
  <h2>Finders</h2>
  <p>
    These methods will retrieve records or metadata from the database and should be the last method you call in a query.
  </p>

  <section>
    <h3>first(callback)</h3>
    <p>
      Fetches the first record in the current query.
      
      <script src="https://gist.github.com/1631808.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>array(callback)</h3>
    <p>
      Fetches all the records in the current query as an array.
      
      <script src="https://gist.github.com/1631838.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>each(callback)</h3>
    <p>
      Fetches all the records in the current query and calls the callback one record at a time.  When there are no
      more records, a null will be passed to the callback for both the error and item.
    </p>
    <p>
      <strong>NOTE:</strong> Even if there are no records in the collection, the callback will be invoked once with
      nulls for both arguments.
      
      <script src="https://gist.github.com/1631867.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>count(callback)</h3>
    <p>
      Counts the records in the current query.
      
      <script src="https://gist.github.com/1631893.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>distinct(key, callback)</h3>
    <p>
      Collects the distinct values for <code>key</code>.
      
      <script src="https://gist.github.com/1631902.js"> </script>
    </p>
  </section>
</section>

<section id="modifiers">
  <h2>Modifiers</h2>
  <p>
    These methods modify the records returned by the above <a href="#finders">finders</a>.  They return a query
    object that can be further modified or executed by a finder.
  </p>

  <section>
    <h3>skip(count)</h3>
    <p>
      Skips <code>count</code> records in the current query.
      
      <script src="https://gist.github.com/1631961.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>limit(count)</h3>
    <p>
      Limits the current query to <code>count</code> records.
      
      <script src="https://gist.github.com/1631975.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>sort(fields)</h3>
    <p>
      Sorts the records on the MongoDB side.
      
      <script src="https://gist.github.com/1636404.js"> </script>
    </p>
  </section>
  
  <section>
    <h3>fields(fields)</h3>
    <p>
      Choose the fields to include or exclude.
      
      <script src="https://gist.github.com/1637563.js"> </script>
    </p>
  </section>
</section>

<section id="queries">
  <h2>Queries</h2>
  <p>
    Queries are written just like in the MongoDB Shell, only using the <code>where</code> method.
  </p>

  <section>
    <h3>where(query)</h3>
    <p>
      Filters the collection using any options that MonogDB supports.  There is little magic here.  You can use any
      JSON object that would work in the <code>find()</code> method on the MongoDB shell.  For more information on
      querying MongoDB, checkout <a href="http://www.mongodb.org/display/DOCS/Advanced+Queries">the docs</a>.
      
      <script src="https://gist.github.com/1640786.js"> </script>
    </p>
  </section>
</section>

<section id="actions">
  <h2>Actions</h2>
  <p>
    
  </p>
  
  <section>
    <h3>save(obj, callback = null)</h3>
    <p>
      
    </p>
  </section>
  
  <section>
    <h3>update(query, update, options, callback = null)</h3>
    <p>
    </p>
  </section>
  
  <section>
    <h3>update_multi(query, update, callback = null)</h3>
    <p>
    </p>
  </section>
  
  <section>
    <h3>upsert(query, update, callback = null)</h3>
    <p>
    </p>
  </section>
  
  <section>
    <h3>remove(query, callback = null)</h3>
    <p>
    </p>
  </section>
  
  <section>
    <h3>find_and_modify(options, callback)</h3>
    <p>
    </p>
  </section>
  
  <section>
    <h3>map_reduce(map, reduce, options, callback)</h3>
    <p>
    </p>
  </section>
</section>
